pipeline {
    agent any
    tools {
        go 'Go'
    }

    environment {
        SONARQUBE_SERVER = 'sonar_server'
        TRIVY_SEVERITY = 'HIGH,CRITICAL'
        DOCKER_IMAGE = "sirishak83/product-catalog:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'Git_credentials', url: 'https://github.com/sirisha-k83/ultimate-devops-project-demo.git', branch: 'main'
            }
        }
        
        // This stage is not needed; Jenkins handles the Go installation automatically.
        // stage('Install Go Locally') { ... }

        stage('Build') {
            steps {
                dir('src/product-catalog') {
                    // Jenkins automatically adds 'go' to the PATH because of the tools block
                    sh 'go mod tidy'
                    sh 'go build -o product-catalog .'
                }
            }
        }
        stage('SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('sonar_token')
            }
            steps {
                dir('src/product-catalog') {
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh '''
                            sonar-scanner \\
                            -Dsonar.projectKey=Product-catalog\\
                            -Dsonar.projectName=Product-catalog \\
                            -Dsonar.sources=. \\
                            -Dsonar.login=$SONAR_TOKEN
                        '''
                    }
                }
            }
        }
        stage('TRIVY FS Scan') {
            steps {
                sh '''
                    trivy fs --severity HIGH,CRITICAL --exit-code 0 --no-progress . > trivyfs.txt
                '''
            }
        }
        stage('Docker Build & Push') {
            steps {
                dir('src/product-catalog') {
                    script {
                        def dockerImage = "sirishak83/product-catalog:${env.BUILD_NUMBER}"
                        docker.withRegistry('https://index.docker.io/v1/', 'docker_login') {
                            def app = docker.build(dockerImage, "-f Dockerfile .")
                            app.push()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
